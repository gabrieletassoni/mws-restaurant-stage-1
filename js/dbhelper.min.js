class DBHelper{static get DATABASE_URL(){const port=1337;return"http://localhost:1337/"}static get DATABASE_RESTAURANTS_URL(){return`${this.DATABASE_URL}restaurants`}static get DATABASE_REVIEWS_URL(){return`${this.DATABASE_URL}reviews`}static initDB(){return navigator.serviceWorker?idb.open("mws",2,upgradeDb=>{const tableRestaurant=upgradeDb.createObjectStore("restaurants",{keyPath:"id"});tableRestaurant.createIndex("changed","changed",{unique:!1});const restaurantReview=upgradeDb.createObjectStore("reviews",{keyPath:"local_id",autoIncrement:!0});restaurantReview.createIndex("restaurant_id","restaurant_id",{unique:!1}),restaurantReview.createIndex("server_id","id",{unique:!1})}):(console.log("Browser can't support serviceworkers"),Promise.resolve())}static fetchRestaurants(callback){fetch(DBHelper.DATABASE_RESTAURANTS_URL).then(response=>response.json()).then(restaurants=>{this.initDB().then(db=>{if(!db)return;let tx,store=db.transaction("restaurants","readwrite").objectStore("restaurants");restaurants.forEach(function(restaurant){store.get(parseInt(restaurant.id)).then(local_restaurant=>{"false"===local_restaurant.changed&&store.put(restaurant)}).catch(error=>{store.put(restaurant)})}),callback(null,restaurants)})}).catch(error=>{console.log(error),this.initDB().then(db=>{var tx,store;db&&db.transaction("restaurants").objectStore("restaurants").getAll().then(restaurants=>{callback(null,restaurants)}).catch(error=>callback(error,null))}).catch(error=>callback(error,null))})}static fetchReviewsByRestaurantId(id){return fetch(`${DBHelper.DATABASE_REVIEWS_URL}/?restaurant_id=${id}`).then(response=>(console.log(`Response for reviews of restaurant ${id} returned.`),response.json())).then(reviews=>(console.log("Sending this restaurant reviews to next steps"),console.log(reviews),this.initDB().then(db=>{if(!db)return;let tx,store=db.transaction("reviews","readwrite").objectStore("reviews"),indexReviews=store.index("server_id");reviews.forEach(function(review){console.log("Review:"),console.log(review),indexReviews.get(parseInt(review.id)).then(local_review=>{console.log("Local Review:"),console.log(local_review),void 0===local_review&&(console.log(`Adding review to the DB, since no local_review exists by this id: ${review.id}`),store.put(review))})})}),reviews)).catch(error=>(console.log("Error Fetching: trying to fetch from DB"),this.initDB().then(db=>{if(!db)return;console.log("DB exists");const tx=db.transaction("reviews");console.log("Transaction OK");const store=tx.objectStore("reviews");console.log("Opened objctStore");const reviewsIndex=store.index("restaurant_id");return console.log(`Made an index on reviews for restaurant id: ${id}`),reviewsIndex.getAll(parseInt(id)).then(reviews=>(console.log(reviews),reviews)).catch(error=>console.log(error))}).catch(error=>console.log(error))))}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?DBHelper.fetchReviewsByRestaurantId(id).then(reviews=>{restaurant.reviews=reviews}).then(()=>{callback(null,restaurant)}):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant,size){return`/img/${size}-${restaurant.photograph||restaurant.id}.webp`}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}static toggleFavourite(id){console.log(`Change favorite value for ${id}`),DBHelper.initDB().then(db=>{if(!db)return;let tx,store=db.transaction("restaurants","readwrite").objectStore("restaurants");store.get(parseInt(id)).then(restaurant=>{const isFavorite="true"===restaurant.is_favorite;restaurant.is_favorite=(!isFavorite).toString(),restaurant.updatedAt=Date.now(),restaurant.changed="true",store.put(restaurant);const favouriteLink=document.getElementById(`fav-link-${restaurant.id}`);favouriteLink.innerHTML=isFavorite?"♡":"♥",navigator.serviceWorker.ready.then(function(reg){reg.sync.register("favsync").then(()=>{console.log("Start syncing Favorites")})})})})}}