class DBHelper{static get DATABASE_URL(){const port=1337;return"http://localhost:1337/restaurants"}static initDB(){return navigator.serviceWorker?idb.open("restaurants",2,upgradeDb=>{upgradeDb.createObjectStore("restaurants",{keyPath:"id"})}):(console.log("Browser can't support serviceworkers"),Promise.resolve())}static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(response=>response.json()).then(restaurants=>{this.initDB().then(db=>{if(!db)return;let tx,store=db.transaction("restaurants","readwrite").objectStore("restaurants");restaurants.forEach(function(restaurant){store.put(restaurant)}),callback(null,restaurants)})}).catch(error=>{console.log(error),this.initDB().then(db=>{var tx,store;db&&db.transaction("restaurants").objectStore("restaurants").getAll().then(restaurants=>{callback(null,restaurants)}).catch(error=>callback(error,null))}).catch(error=>callback(error,null))})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?callback(null,restaurant):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant,size){return`/img/${size}-${restaurant.photograph||restaurant.id}.webp`}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}