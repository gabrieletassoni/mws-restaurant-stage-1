importScripts("/js/idb.js"),importScripts("/js/dbhelper.js");var currentCacheName="restaurant-reviews-cache-v142";function favSync(){return new Promise(function(resolve,reject){console.log("opening DB"),idb.open("mws",1).then(db=>{if(console.log("checking DB"),!db)return;console.log("DB exists: Starting the update procedure");const tx=db.transaction("restaurants","readwrite"),store=tx.objectStore("restaurants"),storeIndex=store.index("changed");storeIndex.getAll("true").then(function(restaurants){restaurants.forEach(function(restaurant){const url=`${DBHelper.DATABASE_RESTAURANTS_URL}/${restaurant.id}/?is_favorite=${restaurant.is_favorite}`;console.log(`Sending fav to remote: ${url}`),fetch(url,{method:"PUT"}).then(function(response){return console.log("Watching the response:"),console.log(response),response.json()}).then(function(returnedRestaurant){const tx=db.transaction("restaurants","readwrite"),store=tx.objectStore("restaurants");console.log(returnedRestaurant),console.log("Setting changed to false and saving it in order to avoid other syncs of the same data"),returnedRestaurant.changed="false",store.put(returnedRestaurant),resolve("synced")}).catch(function(error){reject(error)})})})})})}self.addEventListener("install",function(event){event.waitUntil(caches.open(currentCacheName).then(function(cache){return cache.addAll(["/","/sw.min.js"])}))}),self.addEventListener("activate",function(event){event.waitUntil(caches.keys().then(function(cacheNames){return Promise.all(cacheNames.filter(function(cacheName){return cacheName.startsWith("restaurant-reviews-")&&cacheName!=currentCacheName}).map(function(cacheName){return caches.delete(cacheName)}))}))}),self.addEventListener("fetch",function(event){const pathname=new URL(event.request.url).pathname;pathname.startsWith("/restaurants")||pathname.startsWith("/reviews")||event.respondWith(caches.open(currentCacheName).then(function(cache){return cache.match(event.request).then(function(response){return response||fetch(event.request).then(function(response){return cache.put(event.request,response.clone()),response})})}))}),self.addEventListener("message",function(event){"skipWaiting"===event.data.action&&(self.skipWaiting(),console.log("skip waiting"))}),self.addEventListener("online",event=>{event.waitUntil(favSync())}),self.addEventListener("sync",function(event){"favsync"===event.tag&&event.waitUntil(favSync())});